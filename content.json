{"meta":{"title":"点滴","subtitle":null,"description":null,"author":"https://github.com/kangning1206","url":"https://kangning1206.github.io"},"pages":[],"posts":[{"title":"http概述","slug":"http1","date":"2018-11-27T07:30:21.000Z","updated":"2018-11-27T08:07:32.000Z","comments":true,"path":"2018/11/27/http1/","link":"","permalink":"https://kangning1206.github.io/2018/11/27/http1/","excerpt":"","text":"HTTP 的基本性质HTTP 是简单的节虽然下一代HTTP/2协议将HTTP消息封装到了帧（frames）中，HTTP大体上还是被设计得简单易读。HTTP报文能够被人读懂，还允许简单测试，降低了门槛，对新人很友好。 HTTP 是可扩展的节在 HTTP/1.0 中出现的 HTTP headers 让协议扩展变得非常容易。只要服务端和客户端就新 headers达成语义一致，新功能就可以被轻松加入进来。 HTTP 是无状态，有会话的节HTTP是无状态的：在同一个连接中，两个执行成功的请求之间是没有关系的。这就带来了一个问题，用户没有办法在同一个网站中进行连续的交互，比如在一个电商网站里，用户把某个商品加入到购物车，切换一个页面后再次添加了商品，这两次添加商品的请求之间没有关联，浏览器无法知道用户最终选择了哪些商品。而使用HTTP的头部扩展，HTTP Cookies就可以解决这个问题。把Cookies添加到头部中，创建一个会话让每次请求都能共享相同的上下文信息，达成相同的状态。 注意，HTTP本质是无状态的，使用Cookies可以创建有状态的会话。同一台机器cookie是相同了，这样服务器就能辨别客户端访问身份； HTTP 和连接节一个连接是由传输层来控制的，这从根本上不属于HTTP的范围。HTTP并不需要其底层的传输层协议是面向连接的，只需要它是可靠的，或不丢失消息的（至少返回错误）。在互联网中，有两个最常用的传输层协议：TCP是可靠的，而UDP不是。因此，HTTP依赖于面向连接的TCP进行消息传递，但连接并不是必须的。 这也是为什么http协议是建立在tcp协议之上的原因，确保每次连接可靠，但无需实时可用； HTTP/1.0为每一个请求/响应都打开一个TCP连接，导致了2个缺点：打开一个TCP连接需要多次往返消息传递，因此速度慢。但当多个消息周期性发送时，这样就变得更加高效：暖连接比冷连接更高效。 上边我们说到，http 请求无需实时可用，但从实际网页需求来看，没此简历tcp连接需要3次握手，这种转身就忘记的特性，势必带来了效率问题，因此在http1.1中引入了长连接；也就说我们看到的头部 Connection: keep-alive 信息； 长连接和短连接Connection: keep-aliveConnection: close 为了减轻这些缺陷，HTTP/1.1引入了流水线（被证明难以实现）和持久连接的概念：底层的TCP连接可以通过Connection头部来被部分控制。HTTP/2则发展得更远，通过在一个连接复用消息的方式来让这个连接始终保持为暖连接。 为了更好的适合HTTP，设计一种更好传输协议的进程一直在进行。Google就研发了一种以UDP为基础，能提供更可靠更高效的传输协议QUIC。","categories":[],"tags":[]},{"title":"前端知识点分类","slug":"resource-md","date":"2018-11-27T01:48:25.000Z","updated":"2018-11-28T01:04:59.000Z","comments":true,"path":"2018/11/27/resource-md/","link":"","permalink":"https://kangning1206.github.io/2018/11/27/resource-md/","excerpt":"","text":"vue vue.js基本 vuex 数据状态管理 axios使用 vue-router pc端ui和移动端ui JavaScript 闭包 作用域、作用域链路 继承 es2015新特性 web原理 http 304缓存 cors共享 浏览器原理:https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/ node koa.js 工程化 webpack 客户端es6，vue,react配置 服务器端es6 质量 eslint配置和常用标准 单元测试、覆盖率、用户测试：mocha,karma,e2e了解库 测试框架,比如 Mocha、Jasmine、Karma、Tape mock.js 工具 抓包工具，如charles使用 浏览器开发者工具 编辑器 检查 Cache 相关 HTTP 首部的工具. RedBot 其他 rest接口开发模式 学习网站https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Overview","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-11-27T01:31:58.000Z","updated":"2018-11-27T01:31:58.000Z","comments":true,"path":"2018/11/27/hello-world/","link":"","permalink":"https://kangning1206.github.io/2018/11/27/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}